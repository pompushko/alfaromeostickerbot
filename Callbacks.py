from aiogram.types import CallbackQuery
from SendPhoto import send_photos  
from GetImage import get_image

async def handle_photos_callback(callback_query: CallbackQuery, bot, get_image):
    vin = callback_query.data.split(":")[1]
    await callback_query.answer()

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
        original_caption = callback_query.message.caption

        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ –ø–æ–∏—Å–∫–µ
        progress_caption = (
            f"{original_caption}\n\n"
            f"<b>–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ª–æ—Ç–∞...</b> !üîÑ"
        )
        await bot.edit_message_caption(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            caption=progress_caption,
            parse_mode="HTML",
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (–ø–æ —Ö–æ—Ä–æ—à–µ–º—É –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–ª –∫–∞—Ä—Ç–∏–Ω–æ–∫)
        _, lot_url = await get_image(vin)
        if not lot_url:
            not_found_caption = (
                f"{original_caption}\n\n"
                f"<b>–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</b> üëÄ"
            )
            await bot.edit_message_caption(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                caption=not_found_caption,
                parse_mode="HTML",
                reply_markup=None
            )
            return            
        send_photo_caption = (
            f"{original_caption}\n\n"
            f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ—Ç:</b>\n\n"
            f'<a href="{lot_url}"><u>–¢–´–¶</u></a>\n\n'
            f"<b>–õ–æ—Ç –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...üì∑</b>\n\n"
        )
        await bot.edit_message_caption(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            caption=send_photo_caption,
            parse_mode="HTML",
            reply_markup=None
        )

        img_not_found = await send_photos(
            bot=bot,
            vin=vin,
            chat_id=callback_query.message.chat.id,
            reply_to_message_id=callback_query.message.message_id,
            get_image=get_image
        )
        if img_not_found:
            final_caption = (
                f"{original_caption}\n\n"
                f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ—Ç:</b>\n\n"
                f'<a href="{lot_url}"><u>–¢–´–¶</u></a>\n\n'
                f"<b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å.</b>"  
            )
        else:
            final_caption = (
                f"{original_caption}\n\n"
                f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ—Ç:</b>\n\n"
                f'<a href="{lot_url}"><u>–¢–´–¶</u></a>\n\n'
            )

        await bot.edit_message_caption(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            caption=final_caption,
            parse_mode="HTML",
            reply_markup=None
        )             
    except Exception as e:
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞
        error_caption = (
            f"{original_caption}\n\n"
            f"<b>–û—à–∏–±–∫–∞:</b> {str(e)} ‚ùå"
        )
        await bot.edit_message_caption(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            caption=error_caption,
            parse_mode="HTML",
        )
